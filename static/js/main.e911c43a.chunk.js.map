{"version":3,"sources":["App.js","index.js"],"names":["emailList","name","id","App","useState","options","setOptions","show","setShow","defEmail","setEmail","title","setTitle","text","setText","textArea","setArea","emailCheckedList","putType","setPutType","isEmailCorrect","setErrorEmail","isEmptyTitle","setTitleError","isEmailCheked","setEmailToError","useEffect","fetch","then","response","json","data","ok","Promise","reject","Error","status","email","catch","error","alert","putOnAPI","event","a","pattern","RegExp","preventDefault","test","length","info","emailFrom","gateway_name","type","emailTo","join","method","body","JSON","stringify","headers","className","onSubmit","onChange","target","value","unique","filter","item","findIndex","x","push","uniq","map","opt","placeholder","checked","indexOf","splice","cheking","onClick","document","querySelectorAll","forEach","Object","assign","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.e911c43a.chunk.js","sourcesContent":["import './App.css';\nimport React, { useState, useEffect } from 'react';\n\nconst emailList = [{\n  name: 'haiday.andriy@gmail.com', id: 1,\n}, {\n  name: 'andriyg55@gmail.com', id: 2,\n}, {\n  name: 'test@gmail.com', id: 3,\n}];\n\n// eslint-disable-next-line\nconst BASE_URL = 'https://bridge.dev.smartpointlab.com/api/gateways?api_key=2e081b9fa08aec1d3577ec5f582f87b6';\n\nconst getAll = () => fetch(`${BASE_URL}`).then(response => response.json());\nconst getDefaultEmail = () => (\n// eslint-disable-next-line\n  fetch('https://bridge.dev.smartpointlab.com/api/source_account?api_key=2e081b9fa08aec1d3577ec5f582f87b6'))\n  .then((response) => {\n    if (response.ok) {\n      return response.json();\n    }\n\n    return Promise.reject(new Error('fail')).then(`${response.status}`);\n  });\n\nfunction App() {\n  const [options, setOptions] = useState([]);\n  const [show, setShow] = useState(false);\n  const [defEmail, setEmail] = useState('');\n  const [title, setTitle] = useState('');\n  const [text, setText] = useState('');\n  const [textArea, setArea] = useState('');\n  let emailCheckedList = [];\n  const [putType, setPutType] = useState('sms');\n  const [isEmailCorrect, setErrorEmail] = useState(false);\n  const [isEmptyTitle, setTitleError] = useState(false);\n  const [isEmailCheked, setEmailToError] = useState(false);\n\n  useEffect(() => {\n    getAll().then(data => setOptions(data), setShow(true));\n\n    getDefaultEmail().then(email => setEmail(email.email))\n      .catch(error => alert('Oops, smth wrong with API', error), setEmail(''));\n  }, []);\n\n  function uniq(data) {\n    const unique = [];\n\n    data.filter((item) => {\n      const i = unique.findIndex(x => (x.type === item.type));\n\n      if (i <= -1) {\n        unique.push(item);\n      }\n\n      return null;\n    });\n\n    return unique;\n  }\n\n  const cheking = (event) => {\n    if (event.target.checked) {\n      emailCheckedList.push(event.target.name);\n    } else if (emailCheckedList.indexOf(event.target.name) !== -1) {\n      emailCheckedList.splice(emailCheckedList.indexOf(event.target.name), 1);\n    }\n  };\n\n  const selectAll = () => {\n    const inputs = [...document.querySelectorAll(\"input[type='checkbox']\")];\n\n    inputs.forEach(item => Object.assign(item, { [item.checked]: true }));\n    emailCheckedList = [...emailList.map(email => email.name)];\n  };\n\n  const putOnAPI = async(event) => {\n  // eslint-disable-next-line\n  const pattern = new RegExp(/^((\"[\\w-\\s]+\")|([\\w-]+(?:\\.[\\w-]+)*)|(\"[\\w-\\s]+\")([\\w-]+(?:\\.[\\w-]+)*))(@((?:[\\w-]+\\.)*\\w[\\w-]{0,66})\\.([a-z]{2,6}(?:\\.[a-z]{2})?)$)|(@\\[?((25[0-5]\\.|2[0-4][0-9]\\.|1[0-9]{2}\\.|[0-9]{1,2}\\.))((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\.){2}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\]?$)/i);\n\n    event.preventDefault();\n\n    if (!pattern.test(defEmail)) {\n      setErrorEmail(true);\n    } else {\n      setErrorEmail(false);\n    }\n\n    if (title.length < 1) {\n      setTitleError(true);\n    } else {\n      (setTitleError(false));\n    }\n\n    if (emailCheckedList.length < 1) {\n      setEmailToError(true);\n    } else {\n      setEmailToError(false);\n    }\n\n    const info = {\n      emailFrom: 'df@smartpointlab.com',\n      gateway_name: 'send_grid_windrose',\n      type: putType,\n      // emailFrom: defEmail,\n      title,\n      text,\n      emailTo: emailCheckedList.join(','),\n    };\n\n    // eslint-disable-next-line\n    await fetch('https://bridge.dev.smartpointlab.com/api/message/send?api_key=2e081b9fa08aec1d3577ec5f582f87b6', {\n\n      method: 'POST',\n      body: JSON.stringify(info),\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    }).then(response => response.json())\n      .catch(error => alert('something go wrong', error));\n  };\n\n  return (\n    <div className=\"App\">\n      <form onSubmit={event => putOnAPI(event)} className=\"form\">\n        <p className=\"header\" />\n        <section className=\"services\">\n          <p>Please select a service:</p>\n          <select\n            onChange={event => setPutType(event.target.value)}\n            className=\"input\"\n          >\n            {show && uniq(options).map(opt => (\n              <option key={opt.name} value={opt.type}>{opt.type}</option>\n            ))}\n          </select>\n        </section>\n\n        <section className=\"emailFrom\">\n          <p>Enter your email:</p>\n          <input\n            type=\"text\"\n            placeholder=\"someEmail@.com\"\n            value={defEmail}\n            onChange={event => setEmail(event.target.value)}\n            className={isEmailCorrect ? 'error input' : 'input'}\n          />\n          {isEmailCorrect && (\n            <span className=\"label_err\">\n              <br />\n              Please check email and try again\n            </span>\n          )}\n        </section>\n\n        <section className=\"title\">\n          <p>Enter email title</p>\n          <input\n            type=\"text\"\n            value={title}\n            placeholder=\"About\"\n            onChange={event => setTitle(event.target.value)}\n            className={isEmptyTitle ? 'error input' : 'input'}\n          />\n          {isEmptyTitle && (\n            <span className=\"label_err\">\n              <br />\n              Please, wright a title\n            </span>\n          )}\n        </section>\n\n        <section className=\"body\">\n          <p>Enter email text</p>\n          <input\n            type=\"text\"\n            value={text}\n            placeholder=\"Some text\"\n            onChange={event => setText(event.target.value)}\n            className=\"input\"\n          />\n        </section>\n\n        <section className=\"textarea\">\n          <p>HTML</p>\n          <textarea\n            type=\"text\"\n            placeholder=\"<html>\"\n            value={textArea}\n            onChange={event => setArea(event.target.value)}\n            className=\"input\"\n          />\n        </section>\n\n        <section className=\"emailTo\">\n          <ul className=\"list\">\n            {emailList.map(email => (\n              <li key={email.id}>\n                <input\n                  type=\"checkbox\"\n                  name={email.name}\n                  onChange={event => cheking(event)}\n                />\n                {email.name}\n              </li>\n            ))}\n            {isEmailCheked && (\n              <span className=\"label_err\">\n                <br />\n                Please, select at least one email\n              </span>\n            )}\n          </ul>\n          <button\n            type=\"button\"\n            onClick={selectAll}\n            className=\"select_button\"\n          >\n            Check all\n          </button>\n        </section>\n\n        <button type=\"submit\" className=\"submit_button\">Submit</button>\n      </form>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}